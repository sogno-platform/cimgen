#ifndef {{class_name}}_H
#define {{class_name}}_H
/*
Generated from the CGMES files via cimgen: https://github.com/sogno-platform/cimgen
*/

#include <list>
#include <map>
#include <string>
#include <unordered_map>

#include "{{subclass_of}}.hpp"
#include "BaseClassDefiner.hpp"
#include "CGMESProfile.hpp"
#include "CimClassDetails.hpp"
{{#attribute_class_includes}}
#include "{{.}}.hpp"
{{/attribute_class_includes}}

namespace CIMPP
{
{{#attribute_class_declarations}}
	class {{.}};
{{/attribute_class_declarations}}

{{#class_comment}}
	/** \brief {{{class_comment}}} */
{{/class_comment}}
	class {{class_name}} : public {{subclass_of}}
	{
	public:
		/* constructor initialising all attributes to null */
		{{class_name}}();
		~{{class_name}}() override;
{{#attributes}}

		/** \brief {{comment}} Default: {{default_value}} */
{{#is_primitive_attribute}}
		CIMPP::{{attribute_class}} {{variable_name}};
{{/is_primitive_attribute}}
{{#is_datatype_attribute}}
		CIMPP::{{attribute_class}} {{variable_name}};
{{/is_datatype_attribute}}
{{#is_enum_attribute}}
		CIMPP::{{attribute_class}} {{variable_name}};
{{/is_enum_attribute}}
{{#is_class_attribute}}
		CIMPP::{{attribute_class}}* {{variable_name}};
{{/is_class_attribute}}
{{#is_list_attribute}}
		std::list<CIMPP::{{attribute_class}}*> {{variable_name}};
{{/is_list_attribute}}
{{/attributes}}

		static const char debugName[];
		const char* debugString() const override;

		const std::list<std::string>& getAttributeNames() const override;

		const std::string& getClassNamespaceUrl() const override;
		const std::string& getAttributeNamespaceUrl(const std::string& attrName) const override;

		const std::list<CGMESProfile>& getPossibleProfiles() const override;
		const CGMESProfile& getRecommendedProfile() const override;
		const std::list<CGMESProfile>& getPossibleAttributeProfiles(const std::string& attrName) const override;
		const std::list<CGMESProfile>& getPossibleProfilesIncludingAttributes() const override;

		static void addConstructToMap(std::unordered_map<std::string, BaseClass* (*)()>& factory_map);
		static void addPrimitiveAssignFnsToMap(std::unordered_map<std::string, assign_function>& assign_map);
		static void addClassAssignFnsToMap(std::unordered_map<std::string, class_assign_function>& assign_map);
		void addPrimitiveGetFnsToMap(std::map<std::string, get_function>& get_map) const override;
		void addClassGetFnsToMap(std::map<std::string, class_get_function>& get_map) const override;
		void addEnumGetFnsToMap(std::map<std::string, get_function>& get_map) const override;

		bool isAssignableFrom(BaseClass* otherObject) const override;
		static const BaseClassDefiner declare();

	protected:
		std::map<std::string, AttrDetails> allAttrDetailsMap() const override;
	};

	BaseClass* {{class_name}}_factory();
}
#endif
