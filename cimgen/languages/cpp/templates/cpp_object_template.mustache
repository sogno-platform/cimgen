/*
Generated from the CGMES files via cimgen: https://github.com/sogno-platform/cimgen
*/
#include "{{class_name}}.hpp"

#include <algorithm>
#include <ios>
#include <iterator>
#include <sstream>

{{#attribute_class_declarations}}
#include "{{.}}.hpp"
{{/attribute_class_declarations}}

using namespace CIMPP;

static const CimClassDetails& getCimClassDetails()
{
	static const CimClassDetails ClassDetails = CimClassDetails(
		{{class_name}}(),
		"{{class_namespace}}",
		{
{{#class_origin}}
			CGMESProfile::{{.}},
{{/class_origin}}
		},
		CGMESProfile::{{recommended_class_profile}}
	);
	return ClassDetails;
}

static const std::map<std::string, AttrDetails>& getClassAttrDetailsMap()
{
	static const std::map<std::string, AttrDetails> ClassAttrDetailsMap =
	{
{{#attributes}}
		{ "{{domain}}.{{label}}", { "{{attribute_namespace}}", { {{#attr_origin}}CGMESProfile::{{.}}, {{/attr_origin}}} } },
{{/attributes}}
	};
    return ClassAttrDetailsMap;
}

{{class_name}}::{{class_name}}(){{nullptr_assigns}} {}
{{class_name}}::~{{class_name}}() {}

const std::list<std::string>& {{class_name}}::getAttributeNames() const
{
	return getCimClassDetails().AttrNamesList;
}

const std::string& {{class_name}}::getClassNamespaceUrl() const
{
	return getCimClassDetails().ClassNamespace;
}

const std::string& {{class_name}}::getAttributeNamespaceUrl(const std::string& attrName) const
{
	return getCimClassDetails().getAttributeNamespaceUrl(attrName);
}

const std::list<CGMESProfile>& {{class_name}}::getPossibleProfiles() const
{
	return getCimClassDetails().PossibleProfiles;
}

const CGMESProfile& {{class_name}}::getRecommendedProfile() const
{
	return getCimClassDetails().RecommendedProfile;
}

const std::list<CGMESProfile>& {{class_name}}::getPossibleAttributeProfiles(const std::string& attrName) const
{
	return getCimClassDetails().getPossibleAttributeProfiles(attrName);
}

const std::list<CGMESProfile>& {{class_name}}::getPossibleProfilesIncludingAttributes() const
{
	return getCimClassDetails().PossibleProfilesIncludingAttributes;
}

{{#attributes}}
{{#is_primitive_attribute}}
bool assign_{{domain}}_{{label}}(std::stringstream& buffer, BaseClass* BaseClass_ptr1)
{
	{{domain}}* element = dynamic_cast<{{domain}}*>(BaseClass_ptr1);
	if (element != nullptr)
	{
{{#is_primitive_string}}
		element->{{variable_name}} = buffer.str();
{{/is_primitive_string}}
{{^is_primitive_string}}
		buffer >> element->{{variable_name}};
{{/is_primitive_string}}
		if (!buffer.fail())
		{
			return true;
		}
	}
	return false;
}
{{/is_primitive_attribute}}
{{#is_datatype_attribute}}
bool assign_{{domain}}_{{label}}(std::stringstream& buffer, BaseClass* BaseClass_ptr1)
{
	{{domain}}* element = dynamic_cast<{{domain}}*>(BaseClass_ptr1);
	if (element != nullptr)
	{
		buffer >> element->{{variable_name}};
		if (!buffer.fail())
		{
			return true;
		}
	}
	return false;
}
{{/is_datatype_attribute}}
{{#is_enum_attribute}}
bool assign_{{domain}}_{{label}}(std::stringstream& buffer, BaseClass* BaseClass_ptr1)
{
	{{domain}}* element = dynamic_cast<{{domain}}*>(BaseClass_ptr1);
	if (element != nullptr)
	{
		buffer >> element->{{variable_name}};
		if (!buffer.fail())
		{
			return true;
		}
	}
	return false;
}
{{/is_enum_attribute}}
{{#is_class_attribute}}
{{#inverse_role_name}}
bool assign_{{.}}(BaseClass*, BaseClass*);
bool assign_{{domain}}_{{label}}(BaseClass* BaseClass_ptr1, BaseClass* BaseClass_ptr2)
{
	{{domain}}* element = dynamic_cast<{{domain}}*>(BaseClass_ptr1);
	{{attribute_class}}* element2 = dynamic_cast<{{attribute_class}}*>(BaseClass_ptr2);
	if (element != nullptr && element2 != nullptr)
	{
		if (element->{{variable_name}} != element2)
		{
			element->{{variable_name}} = element2;
			return assign_{{.}}(BaseClass_ptr2, BaseClass_ptr1);
		}
		return true;
	}
	return false;
}
{{/inverse_role_name}}
{{^inverse_role_name}}
bool assign_{{domain}}_{{label}}(BaseClass* BaseClass_ptr1, BaseClass* BaseClass_ptr2)
{
	{{domain}}* element = dynamic_cast<{{domain}}*>(BaseClass_ptr1);
	if (element != nullptr)
	{
		element->{{variable_name}} = dynamic_cast<{{attribute_class}}*>(BaseClass_ptr2);
		if (element->{{variable_name}} != nullptr)
		{
			return true;
		}
	}
	return false;
}
{{/inverse_role_name}}
{{/is_class_attribute}}
{{#is_list_attribute}}
{{#inverse_role_name}}
bool assign_{{.}}(BaseClass*, BaseClass*);
bool assign_{{domain}}_{{label}}(BaseClass* BaseClass_ptr1, BaseClass* BaseClass_ptr2)
{
	{{domain}}* element = dynamic_cast<{{domain}}*>(BaseClass_ptr1);
	{{attribute_class}}* element2 = dynamic_cast<{{attribute_class}}*>(BaseClass_ptr2);
	if (element != nullptr && element2 != nullptr)
	{
		if (std::find(element->{{variable_name}}.begin(), element->{{variable_name}}.end(), element2) == element->{{variable_name}}.end())
		{
			element->{{variable_name}}.push_back(element2);
			return assign_{{.}}(BaseClass_ptr2, BaseClass_ptr1);
		}
		return true;
	}
	return false;
}
{{/inverse_role_name}}
{{^inverse_role_name}}
bool assign_{{domain}}_{{label}}(BaseClass* BaseClass_ptr1, BaseClass* BaseClass_ptr2)
{
	{{domain}}* element = dynamic_cast<{{domain}}*>(BaseClass_ptr1);
	if (element != nullptr)
	{
		if (dynamic_cast<{{attribute_class}}*>(BaseClass_ptr2) != nullptr)
		{
			element->{{variable_name}}.push_back(dynamic_cast<{{attribute_class}}*>(BaseClass_ptr2));
			return true;
		}
	}
	return false;
}
{{/inverse_role_name}}
{{/is_list_attribute}}

{{/attributes}}
{{#attributes}}
{{#is_used}}
{{#is_primitive_attribute}}
bool get_{{domain}}_{{label}}(const BaseClass* BaseClass_ptr1, std::stringstream& buffer)
{
	const {{domain}}* element = dynamic_cast<const {{domain}}*>(BaseClass_ptr1);
	if (element != nullptr)
	{
		buffer << element->{{variable_name}};
		if (!buffer.str().empty())
		{
			return true;
		}
	}
	buffer.setstate(std::ios::failbit);
	return false;
}
{{/is_primitive_attribute}}
{{#is_datatype_attribute}}
bool get_{{domain}}_{{label}}(const BaseClass* BaseClass_ptr1, std::stringstream& buffer)
{
	const {{domain}}* element = dynamic_cast<const {{domain}}*>(BaseClass_ptr1);
	if (element != nullptr)
	{
		buffer << element->{{variable_name}};
		if (!buffer.str().empty())
		{
			return true;
		}
	}
	buffer.setstate(std::ios::failbit);
	return false;
}
{{/is_datatype_attribute}}
{{#is_enum_attribute}}
bool get_{{domain}}_{{label}}(const BaseClass* BaseClass_ptr1, std::stringstream& buffer)
{
	const {{domain}}* element = dynamic_cast<const {{domain}}*>(BaseClass_ptr1);
	if (element != nullptr)
	{
		buffer << element->{{variable_name}};
		if (!buffer.str().empty())
		{
			return true;
		}
	}
	buffer.setstate(std::ios::failbit);
	return false;
}
{{/is_enum_attribute}}
{{#is_class_attribute}}
bool get_{{domain}}_{{label}}(const BaseClass* BaseClass_ptr1, std::list<const BaseClass*>& BaseClass_list)
{
	const {{domain}}* element = dynamic_cast<const {{domain}}*>(BaseClass_ptr1);
	if (element != nullptr)
	{
		if (element->{{variable_name}} != 0)
		{
			BaseClass_list.push_back(element->{{variable_name}});
			return true;
		}
	}
	return false;
}
{{/is_class_attribute}}
{{#is_list_attribute}}
bool get_{{domain}}_{{label}}(const BaseClass* BaseClass_ptr1, std::list<const BaseClass*>& BaseClass_list)
{
	const {{domain}}* element = dynamic_cast<const {{domain}}*>(BaseClass_ptr1);
	if (element != nullptr)
	{
		std::copy(element->{{variable_name}}.begin(), element->{{variable_name}}.end(), std::back_inserter(BaseClass_list));
		return !BaseClass_list.empty();
	}
	return false;
}
{{/is_list_attribute}}
{{/is_used}}

{{/attributes}}
const char {{class_name}}::debugName[] = "{{class_name}}";
const char* {{class_name}}::debugString() const
{
	return {{class_name}}::debugName;
}

void {{class_name}}::addConstructToMap(std::unordered_map<std::string, BaseClass* (*)()>& factory_map)
{
	factory_map.emplace("{{class_name}}", &{{class_name}}_factory);
}

void {{class_name}}::addPrimitiveAssignFnsToMap(std::unordered_map<std::string, assign_function>& assign_map)
{
{{#attributes}}
{{#is_primitive_attribute}}
	assign_map.emplace("{{domain}}.{{label}}", &assign_{{domain}}_{{label}});
{{/is_primitive_attribute}}
{{#is_datatype_attribute}}
	assign_map.emplace("{{domain}}.{{label}}", &assign_{{domain}}_{{label}});
{{/is_datatype_attribute}}
{{#is_enum_attribute}}
	assign_map.emplace("{{domain}}.{{label}}", &assign_{{domain}}_{{label}});
{{/is_enum_attribute}}
{{/attributes}}
}

void {{class_name}}::addClassAssignFnsToMap(std::unordered_map<std::string, class_assign_function>& assign_map)
{
{{#attributes}}
{{#is_class_attribute}}
	assign_map.emplace("{{domain}}.{{label}}", &assign_{{domain}}_{{label}});
{{/is_class_attribute}}
{{#is_list_attribute}}
	assign_map.emplace("{{domain}}.{{label}}", &assign_{{domain}}_{{label}});
{{/is_list_attribute}}
{{/attributes}}
}

void {{class_name}}::addPrimitiveGetFnsToMap(std::map<std::string, get_function>& get_map) const
{
	{{subclass_of}}::addPrimitiveGetFnsToMap(get_map);
{{#attributes}}
{{#is_primitive_attribute}}
	get_map.emplace("{{domain}}.{{label}}", &get_{{domain}}_{{label}});
{{/is_primitive_attribute}}
{{#is_datatype_attribute}}
	get_map.emplace("{{domain}}.{{label}}", &get_{{domain}}_{{label}});
{{/is_datatype_attribute}}
{{/attributes}}
}

void {{class_name}}::addClassGetFnsToMap(std::map<std::string, class_get_function>& get_map) const
{
	{{subclass_of}}::addClassGetFnsToMap(get_map);
{{#attributes}}
{{#is_used}}
{{#is_class_attribute}}
	get_map.emplace("{{domain}}.{{label}}", &get_{{domain}}_{{label}});
{{/is_class_attribute}}
{{#is_list_attribute}}
	get_map.emplace("{{domain}}.{{label}}", &get_{{domain}}_{{label}});
{{/is_list_attribute}}
{{/is_used}}
{{/attributes}}
}

void {{class_name}}::addEnumGetFnsToMap(std::map<std::string, get_function>& get_map) const
{
	{{subclass_of}}::addEnumGetFnsToMap(get_map);
{{#attributes}}
{{#is_enum_attribute}}
	get_map.emplace("{{domain}}.{{label}}", &get_{{domain}}_{{label}});
{{/is_enum_attribute}}
{{/attributes}}
}

bool {{class_name}}::isAssignableFrom(BaseClass* otherObject) const
{
	return std::string(debugString()) == "{{class_name}}" &&
		dynamic_cast<{{class_name}}*>(otherObject) != nullptr;
}

const BaseClassDefiner {{class_name}}::declare()
{
	return BaseClassDefiner({{class_name}}::addConstructToMap, {{class_name}}::addPrimitiveAssignFnsToMap, {{class_name}}::addClassAssignFnsToMap, {{class_name}}::debugName);
}

std::map<std::string, AttrDetails> {{class_name}}::allAttrDetailsMap() const
{
	auto map = getClassAttrDetailsMap();
	const auto& parent_map = {{subclass_of}}::allAttrDetailsMap();
	map.insert(parent_map.begin(), parent_map.end());
	return map;
}

namespace CIMPP
{
	BaseClass* {{class_name}}_factory()
	{
		return new {{class_name}};
	}
}
