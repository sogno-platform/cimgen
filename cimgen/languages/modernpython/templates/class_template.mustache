"""
Generated from the CGMES files via cimgen: https://github.com/sogno-platform/cimgen
"""

from functools import cached_property

from pydantic import Field
from pydantic.dataclasses import dataclass

from ..utils.profile import BaseProfile, Profile
from {{class_location}} import {{subclass_of}}
{{#imports}}
from .{{.}} import {{.}}
{{/imports}}


@dataclass
class {{class_name}}({{subclass_of}}):
    """
    {{{wrapped_class_comment}}}

    {{#attributes}}
    {{label}}: {{{wrapped_comment}}}
    {{/attributes}}
    """

    {{#attributes}}
    {{label}}: {{#set_type}}{{.}}{{/set_type}} = Field(
        {{#set_default}}{{.}}{{/set_default}},
        json_schema_extra={
            "in_profiles": [
                {{#attr_origin}}
                Profile.{{origin}},
                {{/attr_origin}}
            ],
            "is_used": {{#is_used}}True{{/is_used}}{{^is_used}}False{{/is_used}},
            "namespace": "{{attribute_namespace}}",  # NOSONAR
            "is_class_attribute": {{#is_class_attribute}}True{{/is_class_attribute}}{{^is_class_attribute}}False{{/is_class_attribute}},
            "is_datatype_attribute": {{#is_datatype_attribute}}True{{/is_datatype_attribute}}{{^is_datatype_attribute}}False{{/is_datatype_attribute}},
            "is_enum_attribute": {{#is_enum_attribute}}True{{/is_enum_attribute}}{{^is_enum_attribute}}False{{/is_enum_attribute}},
            "is_list_attribute": {{#is_list_attribute}}True{{/is_list_attribute}}{{^is_list_attribute}}False{{/is_list_attribute}},
            "is_primitive_attribute": {{#is_primitive_attribute}}True{{/is_primitive_attribute}}{{^is_primitive_attribute}}False{{/is_primitive_attribute}},
{{#is_datatype_attribute}}
            "attribute_class": "{{attribute_class}}",
{{/is_datatype_attribute}}
{{#is_primitive_attribute}}
            "attribute_class": "{{attribute_class}}",
{{/is_primitive_attribute}}
        },
    )

    {{/attributes}}
    {{^attributes}}
    # No attributes defined for this class.

    {{/attributes}}
    @cached_property
    def possible_profiles(self) -> set[BaseProfile]:
        """
        A resource can be used by multiple profiles. This is the set of profiles
        where this element can be found.
        """
        return {
            {{#class_origin}}
            Profile.{{origin}},
            {{/class_origin}}
        }

    @cached_property
    def recommended_profile(self) -> BaseProfile:
        """
        This is the profile with most of the attributes.
        It should be used to write the data to as few as possible files.
        """
        return Profile.{{recommended_class_profile}}
